{"version":3,"file":"index.js","sources":["../src/contexts/GoogleMapContext.tsx","../src/components/Layer.tsx","../src/components/BicyclingLayer.tsx","../src/common/constants.ts","../src/hooks/useGoogleAPI.ts","../src/hooks/useGoogleListener.ts","../src/hooks/useMemoizedOptions.ts","../src/components/Circle.tsx","../src/components/CustomControl.tsx","../src/components/DrawingManager.tsx","../src/components/GroundOverlay.tsx","../src/hocs/SecurityBounder.tsx","../src/components/HeatMap.tsx","../src/components/InfoWindow.tsx","../src/components/KmlLayer.tsx","../src/components/MapBox.tsx","../src/components/Marker.tsx","../src/components/OverlayView.tsx","../src/components/Polygon.tsx","../src/components/Polyline.tsx","../src/components/Rectangle.tsx","../src/components/BasicSearchBox.tsx","../src/components/SearchBox.tsx","../src/components/StandaloneSearchBox.tsx","../src/components/BasicStreetView.tsx","../src/components/StandaloneStreetView.tsx","../src/components/StreetView.tsx","../src/components/TrafficLayer.tsx","../src/components/TransitLayer.tsx"],"sourcesContent":["import React, {useReducer} from 'react'\nimport {\n  GoogleMapAction,\n  GoogleMapObject,\n  GoogleMapObjectWithSetMap,\n  GoogleMapProviderProps,\n  GoogleMapReducer,\n  GoogleMapState,\n} from '../common/types'\n\nconst initialState = (): GoogleMapState => ({\n  map: undefined,\n  objects: new Map<string, GoogleMapObject>(),\n  places: undefined,\n})\n\nconst GoogleMapContext = React.createContext<GoogleMapReducer>({\n  state: (undefined as unknown) as GoogleMapState,\n  dispatch: (undefined as unknown) as React.Dispatch<GoogleMapAction>,\n})\n\nconst reducer = (state: GoogleMapState, action: GoogleMapAction) => {\n  switch (action.type) {\n    case 'reset':\n      return initialState()\n\n    case 'init_map':\n      if (action.map === undefined)\n        throw new Error('You should specify a map instance')\n      if (state.map !== undefined)\n        throw new Error('There can only be one map instance in a context')\n\n      return {...state, map: action.map, places: action.places}\n\n    case 'add_object':\n      if (action.object === undefined)\n        throw new Error('You should specify an object instance')\n      if (action.id === undefined) throw new Error('You should specify an id')\n      if (state.objects.has(action.id))\n        throw new Error('The id has already been taken')\n      state.objects.set(action.id, action.object)\n\n      return state\n\n    case 'remove_object':\n      if (action.id === undefined) throw new Error('You should specify an id')\n      const objectToRemove = state.objects.get(action.id)\n      if (objectToRemove === undefined)\n        throw new Error('There is no object with the given id')\n\n      // If the object can setMap, then setMap to null\n      if ((objectToRemove as GoogleMapObjectWithSetMap).setMap)\n        (objectToRemove as GoogleMapObjectWithSetMap).setMap(null)\n      state.objects.delete(action.id)\n\n      return state\n\n    default:\n      return state\n  }\n}\n\nconst GoogleMapProvider = ({children}: GoogleMapProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState())\n  const value = {state, dispatch}\n\n  return (\n    <>\n      <GoogleMapContext.Provider value={value}>\n        {children}\n      </GoogleMapContext.Provider>\n    </>\n  )\n}\n\nconst GoogleMapConsumer = GoogleMapContext.Consumer\n\nexport {GoogleMapContext, GoogleMapProvider, GoogleMapConsumer}\n","import React, {useContext, useEffect, useState} from 'react'\nimport {GoogleMapLayer, LayerProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\n\nconst Layer = ({type, opts}: LayerProps) => {\n  const layerId = `${type}-layer`\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [layer, setLayer] = useState<GoogleMapLayer | undefined>(undefined)\n\n  const addLayer = (layer: GoogleMapLayer) =>\n    dispatch({\n      type: 'add_object',\n      object: layer,\n      id: layerId,\n    })\n  const removeLayer = () => dispatch({type: 'remove_object', id: layerId})\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const layerNameToClass = {\n      bicycling: google.maps.BicyclingLayer,\n      traffic: google.maps.TrafficLayer,\n      transit: google.maps.TransitLayer,\n    }\n    const layer =\n      type === 'traffic'\n        ? new layerNameToClass[type](opts)\n        : new layerNameToClass[type]()\n    layer.setMap(state.map)\n    setLayer(layer)\n\n    // Add the layer to state.objects\n    addLayer(layer)\n\n    // Remove the layer when the component is unmounted\n    return () => removeLayer()\n  }, [state.map])\n\n  useEffect(() => {\n    if (type !== 'traffic' || opts === undefined || layer === undefined) return\n    ;(layer as google.maps.TrafficLayer).setOptions(opts)\n  }, [opts])\n\n  return null\n}\n\nLayer.displayName = 'layer'\n\nexport default Layer\n","import React from 'react'\nimport Layer from './Layer'\n\nconst BicyclingLayer = ({}) => <Layer type=\"bicycling\" />\n\nBicyclingLayer.displayName = 'BicyclingLayer'\n\nexport default BicyclingLayer\n","import {\n  GoogleMapLibrary,\n  GroundOverlayOptions,\n  HeatmapLayerOptions,\n} from './types'\n\nexport const NYC_LATLNG: google.maps.LatLngLiteral = {\n  lat: 40.7128,\n  lng: -74.006,\n}\nexport const NYC_POLYGON: google.maps.LatLngLiteral[] = [\n  {lat: 40.718, lng: -74.006},\n  {lat: 40.718, lng: -74.01},\n  {lat: 40.7138, lng: -74.001},\n  {lat: 40.7128, lng: -74.005},\n]\nexport const NYC_RECTANGLE: google.maps.LatLngBoundsLiteral = {\n  east: -74,\n  west: -74.006,\n  north: 40.718,\n  south: 40.714,\n}\n\nconst DEFAULT_MAP_ZOOM = 14\n\nexport const DEFAULT_CIRCLE_OPTIONS: google.maps.CircleOptions = {\n  center: NYC_LATLNG,\n  radius: 200,\n}\n\nexport const DEFAULT_DRAWING_MANAGER_OPTIONS: google.maps.drawing.DrawingManagerOptions = {}\n\nexport const DEFAULT_GROUND_OVERLAY_OPTIONS: GroundOverlayOptions = {\n  url: 'https://placehold.it/256x256',\n  bounds: NYC_RECTANGLE,\n}\n\nexport const DEFAULT_HEAT_MAP_OPTIONS: HeatmapLayerOptions = {\n  data: [{lat: 40.718, lng: -74.006}, {lat: 40.712, lng: -74.01}],\n  radius: 100,\n}\n\nexport const DEFAULT_INFO_WINDOW_OPTIONS: google.maps.InfoWindowOptions = {\n  content: 'Hello',\n  position: NYC_LATLNG,\n}\n\nexport const DEFAULT_KML_LAYER_OPTIONS: google.maps.KmlLayerOptions = {\n  url:\n    'http://api.flickr.com/services/feeds/geo/?g=322338@N20&lang=en-us&format=feed-georss',\n}\n\nexport const DEFAULT_MAP_OPTIONS: google.maps.MapOptions = {\n  center: NYC_LATLNG,\n  zoom: DEFAULT_MAP_ZOOM,\n}\n\nexport const DEFAULT_MAP_STYLE = {\n  height: '100%',\n  width: '100%',\n}\n\nexport const DEFAULT_MARKER_OPTIONS: google.maps.MarkerOptions = {\n  position: NYC_LATLNG,\n}\n\nexport const DEFAULT_POLYGON_OPTIONS: google.maps.PolygonOptions = {\n  paths: NYC_POLYGON,\n}\n\nexport const DEFAULT_POLYLINE_OPTIONS: google.maps.PolylineOptions = {\n  path: NYC_POLYGON,\n}\n\nexport const DEFAULT_RECTANGLE_OPTIONS: google.maps.RectangleOptions = {\n  bounds: NYC_RECTANGLE,\n}\n\nexport const DEFAULT_SEARCH_BOX_OPTIONS: google.maps.places.SearchBoxOptions = {\n  bounds: NYC_RECTANGLE,\n}\n\nexport const DEFAULT_STREET_VIEW_OPTIONS: google.maps.StreetViewPanoramaOptions = {\n  position: NYC_LATLNG,\n}\n\nexport const GOOGLE_MAP_BASE_URI = 'https://maps.googleapis.com/maps/api/js'\n\nexport const GOOGLE_MAP_LIBRARY_NAMES: GoogleMapLibrary[] = [\n  'drawing',\n  'geometry',\n  'places',\n  'visualization',\n]\n","import {useState, useEffect} from 'react'\nimport loadjs from 'loadjs'\nimport {GOOGLE_MAP_BASE_URI} from '../common/constants'\n\ninterface GoogleAPIProps {\n  apiKey: string\n  libraryParam: string\n  languageParam: string\n  regionParam: string\n}\n\nconst useGoogleAPI = ({\n  apiKey,\n  libraryParam,\n  languageParam,\n  regionParam,\n}: GoogleAPIProps) => {\n  const [loaded, setLoaded] = useState(false)\n  useEffect(() => {\n    // Should not load script at server side\n    if (typeof document === 'undefined') return\n\n    const googleMapScriptUri = `${GOOGLE_MAP_BASE_URI}?key=${apiKey}${libraryParam}${languageParam}${regionParam}`\n    if (!loadjs.isDefined('gmap')) loadjs(googleMapScriptUri, 'gmap')\n    loadjs.ready('gmap', {\n      success: () => {\n        setLoaded(true)\n      },\n      error: () => {\n        loadjs.reset()\n        console.error('Unable to fetch Google Map sdk')\n      },\n    })\n  }, [])\n  return loaded\n}\n\nexport default useGoogleAPI\n","import {useEffect} from 'react'\n\ninterface GoogleMapEvent {\n  name: string\n  handler?: Function\n}\n\nconst useGoogleListener = (\n  instance: google.maps.MVCObject | undefined,\n  events: GoogleMapEvent[],\n) => {\n  useEffect(() => {\n    if (instance === undefined) return\n    const listeners: google.maps.MapsEventListener[] = []\n    events.forEach(event => {\n      if (event.handler)\n        listeners.push(\n          google.maps.event.addListener(instance, event.name, event.handler),\n        )\n    })\n    return () => {\n      listeners.forEach(listener => listener.remove())\n    }\n  }, [instance, events])\n}\n\nexport default useGoogleListener\n","import {useEffect} from 'react'\nimport {GoogleMapObjectWithSetOptions} from '../common/types'\n\nconst useMemoizedOptions = (\n  instance: GoogleMapObjectWithSetOptions | undefined,\n  opts: any,\n  prevOpts: string,\n  setPrevOpts: React.Dispatch<React.SetStateAction<string>>,\n) => {\n  useEffect(() => {\n    if (\n      instance === undefined ||\n      opts === undefined ||\n      JSON.stringify(opts) === prevOpts\n    )\n      return\n    instance.setOptions(opts)\n    setPrevOpts(JSON.stringify(opts))\n  }, [instance, opts])\n}\n\nexport default useMemoizedOptions\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_CIRCLE_OPTIONS} from '../common/constants'\nimport {CircleProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst Circle = ({\n  id,\n  opts = DEFAULT_CIRCLE_OPTIONS,\n  onCenterChanged,\n  onClick,\n  onDoubleClick,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  onMouseDown,\n  onMouseOut,\n  onMouseOver,\n  onMouseUp,\n  onRadiusChanged,\n  onRightClick,\n}: CircleProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [circle, setCircle] = useState<google.maps.Circle | undefined>(\n    undefined,\n  )\n  const [circleId] = useState(id ? id : `circle-${uuid()}`)\n  const addCircle = (circle: google.maps.Circle) =>\n    dispatch({type: 'add_object', object: circle, id: circleId})\n  const removeCircle = () => dispatch({type: 'remove_object', id: circleId})\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const circle = new google.maps.Circle({\n      ...opts,\n      map: state.map,\n    })\n    setCircle(circle)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add the circle to state.objects\n    addCircle(circle)\n\n    // Remove the circle when the component is unmounted\n    return () => removeCircle()\n  }, [state.map])\n\n  // Register google map event listeners\n  useGoogleListener(circle, [\n    {name: 'center_changed', handler: onCenterChanged},\n    {name: 'click', handler: onClick},\n    {name: 'dblclick', handler: onDoubleClick},\n    {name: 'drag', handler: onDrag},\n    {name: 'dragend', handler: onDragEnd},\n    {name: 'dragstart', handler: onDragStart},\n    {name: 'mousedown', handler: onMouseDown},\n    {name: 'mouseout', handler: onMouseOut},\n    {name: 'mouseover', handler: onMouseOver},\n    {name: 'mouseup', handler: onMouseUp},\n    {name: 'radius_changed', handler: onRadiusChanged},\n    {name: 'rightclick', handler: onRightClick},\n  ])\n\n  // Modify the google.maps.Circle object when component props change\n  useMemoizedOptions(circle, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nCircle.displayName = 'Circle'\n\nexport default Circle\n","import React, {useContext, useEffect, useState} from 'react'\nimport ReactDOM from 'react-dom'\nimport {CustomControlProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\n\nconst CustomControl = ({\n  bindingPosition = 'RIGHT_TOP',\n  children,\n}: CustomControlProps): React.ReactPortal | null => {\n  if (typeof document === 'undefined') return null\n  const {state} = useContext(GoogleMapContext)\n  const [container] = useState<HTMLDivElement>(document.createElement('div'))\n  const [lastBindingPosition, setLastBindingPosition] = useState(\n    bindingPosition,\n  )\n\n  // Add the custom control to the map\n  useEffect(() => {\n    if (state.map === undefined) return\n    if (bindingPosition !== lastBindingPosition) {\n      const last =\n        state.map.controls[google.maps.ControlPosition[lastBindingPosition]]\n      const lastArray = last.getArray()\n      last.removeAt(lastArray.findIndex(element => element === container))\n      setLastBindingPosition(bindingPosition)\n    }\n    state.map.controls[google.maps.ControlPosition[bindingPosition]].push(\n      container,\n    )\n  }, [state.map, bindingPosition])\n\n  return ReactDOM.createPortal(children, container)\n}\n\nCustomControl.displayName = 'CustomControl'\n\nexport default CustomControl\n","import React, {useContext, useEffect, useRef, useState} from 'react'\nimport {DEFAULT_DRAWING_MANAGER_OPTIONS} from '../common/constants'\nimport {DrawingManagerProps, GoogleMapShape} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst DrawingManager = ({\n  opts = DEFAULT_DRAWING_MANAGER_OPTIONS,\n  onCircleComplete,\n  onMarkerComplete,\n  onOverlayComplete,\n  onPolygonComplete,\n  onPolylineComplete,\n  onRectangleComplete,\n}: DrawingManagerProps) => {\n  const drawingManagerId = 'drawing-manager'\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [drawingManager, setDrawingManager] = useState<\n    google.maps.drawing.DrawingManager | undefined\n  >(undefined)\n  const [shapeCount, setShapeCount] = useState(0)\n  const shapeCountRef = useRef(0)\n  shapeCountRef.current = shapeCount\n  const addShape = (shape: GoogleMapShape) =>\n    setShapeCount(shapeCount => {\n      dispatch({\n        type: 'add_object',\n        object: shape,\n        id: `${drawingManagerId}-${shapeCount}`,\n      })\n      return shapeCount + 1\n    })\n\n  const removeShapes = () => {\n    for (let i = 0; i < shapeCountRef.current; i++) {\n      dispatch({type: 'remove_object', id: `${drawingManagerId}-${i}`})\n    }\n  }\n\n  const addDrawingManager = (\n    drawingManager: google.maps.drawing.DrawingManager,\n  ) =>\n    dispatch({\n      type: 'add_object',\n      object: drawingManager,\n      id: drawingManagerId,\n    })\n\n  const removeDrawingManager = () => {\n    removeShapes()\n    dispatch({type: 'remove_object', id: drawingManagerId})\n  }\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const drawingManager = new google.maps.drawing.DrawingManager({\n      ...opts,\n      map: state.map,\n    })\n    setDrawingManager(drawingManager)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add DrawingManager to state.objects\n    addDrawingManager(drawingManager)\n\n    // Remove DrawingManager and all shapes\n    return () => removeDrawingManager()\n  }, [state.map])\n\n  useGoogleListener(drawingManager, [\n    {name: 'circlecomplete', handler: onCircleComplete},\n    {name: 'markercomplete', handler: onMarkerComplete},\n    {name: 'overlaycomplete', handler: onOverlayComplete},\n    {\n      name: 'overlaycomplete',\n      handler: (event: google.maps.drawing.OverlayCompleteEvent) =>\n        addShape(event.overlay),\n    },\n    {name: 'polygoncomplete', handler: onPolygonComplete},\n    {name: 'polylinecomplete', handler: onPolylineComplete},\n    {name: 'rectanglecomplete', handler: onRectangleComplete},\n  ])\n\n  useMemoizedOptions(drawingManager, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nDrawingManager.displayName = 'DrawingManager'\n\nexport default DrawingManager\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {useGoogleListener} from '../hooks'\nimport {DEFAULT_GROUND_OVERLAY_OPTIONS} from '../common/constants'\nimport {GroundOverlayProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\n\nconst GroundOverlay = ({\n  id,\n  opts = DEFAULT_GROUND_OVERLAY_OPTIONS,\n  onClick,\n  onDoubleClick,\n}: GroundOverlayProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [groundOverlay, setGroundOverlay] = useState<\n    google.maps.GroundOverlay | undefined\n  >(undefined)\n  const [groundOverlayId] = useState(id ? id : `ground-overlay-${uuid()}`)\n  const [prevBounds, setPrevBounds] = useState<\n    google.maps.LatLngBoundsLiteral | undefined\n  >(undefined)\n  const [prevClickable, setPrevClickable] = useState(true)\n  const addGroundOverlay = (groundOverlay: google.maps.GroundOverlay) =>\n    dispatch({type: 'add_object', object: groundOverlay, id: groundOverlayId})\n  const removeGroundOverlay = () =>\n    dispatch({type: 'remove_object', id: groundOverlayId})\n\n  const createGroundOverlay = () => {\n    const groundOverlay = new google.maps.GroundOverlay(opts.url, opts.bounds, {\n      clickable: opts.clickable,\n      opacity: opts.opacity,\n      map: state.map,\n    })\n    setGroundOverlay(groundOverlay)\n\n    // Record bounds and clickable\n    setPrevBounds(opts.bounds)\n    setPrevClickable(opts.clickable === undefined ? true : opts.clickable)\n\n    // Add the groundOverlay to state.objects\n    addGroundOverlay(groundOverlay)\n  }\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    createGroundOverlay()\n\n    // Remove the groundOverlay when the component is unmounted\n    return () => removeGroundOverlay()\n  }, [state.map])\n\n  // Register google map event listeners\n  useGoogleListener(groundOverlay, [\n    {name: 'click', handler: onClick},\n    {name: 'dblclick', handler: onDoubleClick},\n  ])\n\n  // Modify the google.maps.GroundOverlay object when opacity changes\n  useEffect(() => {\n    if (groundOverlay === undefined) return\n    if (opts.opacity && opts.opacity !== groundOverlay.getOpacity())\n      groundOverlay.setOpacity(opts.opacity)\n  }, [opts.opacity])\n\n  // Recreate the object when url/bounds/clickable change\n  useEffect(() => {\n    if (state.map === undefined || groundOverlay === undefined) return\n    const clickable = opts.clickable === undefined ? true : opts.clickable\n    if (\n      opts.url !== groundOverlay.getUrl() ||\n      !Object.is(JSON.stringify(opts.bounds), JSON.stringify(prevBounds)) ||\n      clickable !== prevClickable\n    ) {\n      removeGroundOverlay()\n      createGroundOverlay()\n    }\n  }, [opts.url, opts.bounds, opts.clickable])\n\n  return null\n}\n\nGroundOverlay.displayName = 'GroundOverlay'\n\nexport default GroundOverlay\n","import React, {useEffect, useState} from 'react'\n\nconst validate = () =>\n  window.hasOwnProperty('google') && google.maps && google.maps.visualization\n\nconst withSecurityBounder = (WrappedComponent: any) => (props: any) => {\n  const [visLoaded, setVisLoaded] = useState(false)\n  useEffect(() => {\n    if (validate()) {\n      setVisLoaded(true)\n      return\n    }\n    const timer = setInterval(() => {\n      if (validate()) {\n        setVisLoaded(true)\n        clearInterval(timer)\n      }\n    }, 500)\n  }, [])\n\n  return <>{visLoaded ? <WrappedComponent {...props} /> : null}</>\n}\n\nexport default withSecurityBounder\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_HEAT_MAP_OPTIONS} from '../common/constants'\nimport {HeatMapProps, WeightedLatLng} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport withSecurityBounder from '../hocs/SecurityBounder'\n\nconst transformLatLng = (\n  orig: WeightedLatLng,\n): google.maps.visualization.WeightedLocation => ({\n  location: new google.maps.LatLng(orig.lat, orig.lng),\n  weight: orig.weight || 1,\n})\n\nexport const HeatMap = ({\n  id,\n  opts = DEFAULT_HEAT_MAP_OPTIONS,\n}: HeatMapProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [heatMap, setHeatMap] = useState<\n    google.maps.visualization.HeatmapLayer | undefined\n  >(undefined)\n  const [heatMapId] = useState(id ? id : `heat-map-${uuid()}`)\n  const addHeatMap = (groundOverlay: google.maps.visualization.HeatmapLayer) =>\n    dispatch({type: 'add_object', object: groundOverlay, id: heatMapId})\n  const removeHeatMap = () => dispatch({type: 'remove_object', id: heatMapId})\n  useEffect(() => {\n    if (state.map === undefined) return\n    const heatMap = new google.maps.visualization.HeatmapLayer({\n      ...opts,\n      data: opts.data.map(latLng => transformLatLng(latLng)),\n      map: state.map,\n    })\n    setHeatMap(heatMap)\n    addHeatMap(heatMap)\n    return () => removeHeatMap()\n  }, [state.map])\n\n  useEffect(() => {\n    if (heatMap === undefined || opts.data === undefined) return\n    heatMap.setData(opts.data.map(latLng => transformLatLng(latLng)))\n  }, [opts.data])\n\n  return null\n}\n\nexport const SafeHeatMap = withSecurityBounder(HeatMap)\n","import React, {useContext, useEffect, useState} from 'react'\nimport ReactDOM from 'react-dom'\nimport {DEFAULT_INFO_WINDOW_OPTIONS} from '../common/constants'\nimport {InfoWindowProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener} from '../hooks'\n\nconst InfoWindow = ({\n  anchorId,\n  opts = DEFAULT_INFO_WINDOW_OPTIONS,\n  visible,\n  children,\n  onCloseClick,\n  onContentChanged,\n  onDOMReady,\n  onPositionChanged,\n  onZIndexChanged,\n}: InfoWindowProps): React.ReactPortal | null => {\n  if (typeof document === 'undefined') return null\n  const {state} = useContext(GoogleMapContext)\n  const [infoWindow, setInfoWindow] = useState<\n    google.maps.InfoWindow | undefined\n  >(undefined)\n  const [container] = useState(document.createElement('div'))\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const infoWindow = new google.maps.InfoWindow({\n      ...opts,\n      content: !!children ? container : opts.content,\n    })\n    setInfoWindow(infoWindow)\n\n    const anchor = anchorId ? state.objects.get(anchorId) : undefined\n\n    // Open or close the info window according to the `visible` prop\n    if (visible) infoWindow.open(state.map, anchor)\n    else infoWindow.close()\n\n    // Close the info window when the component is unmounted\n    return () => infoWindow.close()\n  }, [state.map, visible, anchorId && state.objects.get(anchorId)])\n\n  // Register event listeners\n  useGoogleListener(infoWindow, [\n    {name: 'closeclick', handler: onCloseClick},\n    {name: 'content_changed', handler: onContentChanged},\n    {name: 'domready', handler: onDOMReady},\n    {name: 'position_changed', handler: onPositionChanged},\n    {name: 'zindex_changed', handler: onZIndexChanged},\n  ])\n\n  // Modify the google.maps.InfoWindow object when component props change\n  useEffect(() => {\n    if (infoWindow === undefined) return\n    infoWindow.setOptions({\n      ...opts,\n      content: !!children ? container : opts.content,\n    })\n  }, [opts])\n\n  return ReactDOM.createPortal(children, container)\n}\n\nInfoWindow.displayName = 'InfoWindow'\n\nexport default InfoWindow\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_KML_LAYER_OPTIONS} from '../common/constants'\nimport {KmlLayerProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst KmlLayer = ({\n  id,\n  opts = DEFAULT_KML_LAYER_OPTIONS,\n  onClick,\n  onDefaultViewportChanged,\n  onStatusChanged,\n}: KmlLayerProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [kmlLayer, setKmlLayer] = useState<google.maps.KmlLayer | undefined>(\n    undefined,\n  )\n  const [kmlLayerId] = useState(id ? id : `kml-layer-${uuid()}`)\n\n  const addKmlLayer = (kmlLayer: google.maps.KmlLayer) =>\n    dispatch({\n      type: 'add_object',\n      object: kmlLayer,\n      id: kmlLayerId,\n    })\n  const removeKmlLayer = () => dispatch({type: 'remove_object', id: kmlLayerId})\n\n  // Create KmlLayer when map is ready\n  useEffect(() => {\n    if (state.map === undefined) return\n    const kmlLayer = new google.maps.KmlLayer({...opts, map: state.map})\n    setKmlLayer(kmlLayer)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add the kmlLayer to state.objects\n    addKmlLayer(kmlLayer)\n\n    // Remove the kmlLayer when the component is unmounted\n    return () => removeKmlLayer()\n  }, [state.map])\n\n  useGoogleListener(kmlLayer, [\n    {name: 'click', handler: onClick},\n    {name: 'defaultviewport_changed', handler: onDefaultViewportChanged},\n    {name: 'status_changed', handler: onStatusChanged},\n  ])\n\n  useMemoizedOptions(kmlLayer, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nKmlLayer.displayName = 'KmlLayer'\n\nexport default KmlLayer\n","import React, {useEffect, useContext, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {useGoogleAPI, useGoogleListener, useMemoizedOptions} from '../hooks'\nimport {\n  DEFAULT_MAP_OPTIONS,\n  DEFAULT_MAP_STYLE,\n  GOOGLE_MAP_LIBRARY_NAMES,\n} from '../common/constants'\nimport {MapBoxProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\n\nconst MapBox = ({\n  apiKey = '',\n  language,\n  region,\n  className,\n  style = DEFAULT_MAP_STYLE,\n  opts = DEFAULT_MAP_OPTIONS,\n  useDrawing = false,\n  useGeometry = false,\n  usePlaces = false,\n  useVisualization = false,\n  LoadedComponent = null,\n  LoadingComponent = <p>Loading...</p>,\n  onBoundsChanged,\n  onCenterChanged,\n  onClick,\n  onDoubleClick,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  onHeadingChanged,\n  onIdle,\n  onMapTypeIdChanged,\n  onMouseMove,\n  onMouseOut,\n  onMouseOver,\n  onProjectionChanged,\n  onRightClick,\n  onTilesLoaded,\n  onTiltChanged,\n  onZoomChanged,\n}: MapBoxProps) => {\n  // Get access to the Google Map context\n  const {dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [map, setMap] = useState<google.maps.Map | undefined>(undefined)\n\n  // Generate a random id for the DOM node where Google Map will be inserted\n  const [mapItemId] = useState(`map-${uuid()}`)\n\n  // Define action dispatchers\n  const initMap = (\n    map: google.maps.Map,\n    places?: google.maps.places.PlacesService,\n  ) => dispatch({type: 'init_map', map: map, places: places})\n  const reset = () => dispatch({type: 'reset'})\n\n  // Construct the library param\n  const libraries = {\n    drawing: useDrawing,\n    geometry: useGeometry,\n    places: usePlaces,\n    visualization: useVisualization,\n  }\n  const libraryParam = GOOGLE_MAP_LIBRARY_NAMES.filter(\n    library => libraries[library],\n  ).join(',')\n  const loaded = useGoogleAPI({\n    apiKey: apiKey,\n    libraryParam: libraryParam === '' ? '' : `&libraries=${libraryParam}`,\n    languageParam: language === undefined ? '' : `&language=${language}`,\n    regionParam: region === undefined ? '' : `&region=${region}`,\n  })\n\n  // Load Google Map\n  useEffect(() => {\n    if (!loaded) return\n    const stringifiedOpts = JSON.stringify(opts)\n    const map = new google.maps.Map(\n      document.getElementById(mapItemId),\n      JSON.parse(stringifiedOpts),\n    )\n    setMap(map)\n    setPrevOpts(stringifiedOpts)\n    if (usePlaces) {\n      const places = new google.maps.places.PlacesService(map)\n      initMap(map, places)\n    } else initMap(map)\n    return () => reset()\n  }, [loaded])\n\n  // Register event listeners\n  useGoogleListener(map, [\n    {name: 'bounds_changed', handler: onBoundsChanged},\n    {name: 'center_changed', handler: onCenterChanged},\n    {name: 'click', handler: onClick},\n    {name: 'dblclick', handler: onDoubleClick},\n    {name: 'drag', handler: onDrag},\n    {name: 'dragend', handler: onDragEnd},\n    {name: 'dragstart', handler: onDragStart},\n    {name: 'heading_changed', handler: onHeadingChanged},\n    {name: 'idle', handler: onIdle},\n    {name: 'maptypeid_changed', handler: onMapTypeIdChanged},\n    {name: 'mousemove', handler: onMouseMove},\n    {name: 'mouseout', handler: onMouseOut},\n    {name: 'mouseover', handler: onMouseOver},\n    {name: 'projection_changed', handler: onProjectionChanged},\n    {name: 'rightclick', handler: onRightClick},\n    {name: 'tilesloaded', handler: onTilesLoaded},\n    {name: 'tilt_changed', handler: onTiltChanged},\n    {name: 'zoom_changed', handler: onZoomChanged},\n  ])\n\n  // Modify the google.maps.Map object when component props change\n  useMemoizedOptions(map, opts, prevOpts, setPrevOpts)\n\n  // Render <MapBox>\n  return (\n    <>\n      {loaded ? LoadedComponent : LoadingComponent}\n      {typeof document !== 'undefined' ? (\n        <div id={mapItemId} style={style} className={className} />\n      ) : null}\n    </>\n  )\n}\n\nMapBox.displayName = 'MapBox'\n\nexport default MapBox\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_MARKER_OPTIONS} from '../common/constants'\nimport {MarkerProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst Marker = ({\n  id,\n  opts = DEFAULT_MARKER_OPTIONS,\n  onAnimationChanged,\n  onClick,\n  onClickableChanged,\n  onCursorChanged,\n  onDoubleClick,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  onDraggableChanged,\n  onFlatChanged,\n  onIconChanged,\n  onMouseDown,\n  onMouseOut,\n  onMouseOver,\n  onMouseUp,\n  onPositionChanged,\n  onRightClick,\n  onShapeChanged,\n  onTitleChanged,\n  onVisibleChanged,\n  onZIndexChanged,\n}: MarkerProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [marker, setMarker] = useState<google.maps.Marker | undefined>(\n    undefined,\n  )\n  const [markerId] = useState(id ? id : `marker-${uuid()}`)\n\n  const addMarker = (marker: google.maps.Marker) =>\n    dispatch({type: 'add_object', object: marker, id: markerId})\n\n  const removeMarker = () => dispatch({type: 'remove_object', id: markerId})\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const marker = new google.maps.Marker({...opts, map: state.map})\n    setMarker(marker)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add the marker to state.objects\n    addMarker(marker)\n\n    // Remove the marker when the component is unmounted\n    return () => removeMarker()\n  }, [state.map])\n\n  // Register event listeners\n  useGoogleListener(marker, [\n    {name: 'animation_changed', handler: onAnimationChanged},\n    {name: 'click', handler: onClick},\n    {name: 'clickable_changed', handler: onClickableChanged},\n    {name: 'cursor_changed', handler: onCursorChanged},\n    {name: 'dblclick', handler: onDoubleClick},\n    {name: 'drag', handler: onDrag},\n    {name: 'dragend', handler: onDragEnd},\n    {name: 'draggable_changed', handler: onDraggableChanged},\n    {name: 'dragstart', handler: onDragStart},\n    {name: 'flat_changed', handler: onFlatChanged},\n    {name: 'icon_changed', handler: onIconChanged},\n    {name: 'mousedown', handler: onMouseDown},\n    {name: 'mouseout', handler: onMouseOut},\n    {name: 'mouseover', handler: onMouseOver},\n    {name: 'mouseup', handler: onMouseUp},\n    {name: 'position_changed', handler: onPositionChanged},\n    {name: 'rightclick', handler: onRightClick},\n    {name: 'shape_changed', handler: onShapeChanged},\n    {name: 'title_changed', handler: onTitleChanged},\n    {name: 'visible_changed', handler: onVisibleChanged},\n    {name: 'zindex_changed', handler: onZIndexChanged},\n  ])\n\n  // Modify the GoogleMapMarker object when component props change\n  useMemoizedOptions(marker, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nMarker.displayName = 'Marker'\n\nexport default Marker\n","import React, {useContext, useEffect, useState} from 'react'\nimport ReactDOM from 'react-dom'\nimport {NYC_LATLNG} from '../common/constants'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {OverlayViewProps} from '../common/types'\n\nconst OverlayView = ({\n  pane = 'overlayMouseTarget',\n  position = NYC_LATLNG,\n  children,\n  onClick,\n  onDoubleClick,\n  onMouseDown,\n  onMouseOut,\n  onMouseOver,\n  onMouseUp,\n  onTouchEnd,\n  onTouchStart,\n  disableMapHits = false,\n  disableMapHitsAndGestures = false,\n}: OverlayViewProps): React.ReactPortal | null => {\n  if (typeof document === 'undefined') return null\n\n  const {state} = useContext(GoogleMapContext)\n  const [container] = useState<HTMLDivElement>(document.createElement('div'))\n  const [_overlay, setOverlay] = useState<google.maps.OverlayView | undefined>(\n    undefined,\n  )\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const overlay = new google.maps.OverlayView()\n    overlay.onAdd = () => {\n      container.style.position = 'absolute'\n      container.onclick = onClick || null\n      container.ondblclick = onDoubleClick || null\n      container.onmousedown = onMouseDown || null\n      container.onmouseover = onMouseOver || null\n      container.onmouseout = onMouseOut || null\n      container.onmouseup = onMouseUp || null\n      container.ontouchend = onTouchEnd || null\n      container.ontouchstart = onTouchStart || null\n\n      // @types/googlemap does not define `preventMapHitsFrom` or `preventMapHitsAndGesturesFrom`\n      if (disableMapHitsAndGestures)\n        (google.maps.OverlayView as any).preventMapHitsAndGesturesFrom(\n          container,\n        )\n      else if (disableMapHits)\n        (google.maps.OverlayView as any).preventMapHitsFrom(container)\n\n        // Use an ugly cast to avoid package bundle issue\n      ;(overlay.getPanes() as any)[pane].appendChild(container)\n    }\n    overlay.draw = () => {\n      const location = overlay\n        .getProjection()\n        .fromLatLngToDivPixel(\n          new google.maps.LatLng(position.lat, position.lng),\n        )\n      container.style.left = JSON.stringify(location.x) + 'px'\n      container.style.top = JSON.stringify(location.y) + 'px'\n    }\n    overlay.onRemove = () => {\n      container.parentNode && container.parentNode.removeChild(container)\n    }\n    overlay.setMap(state.map)\n    setOverlay(overlay)\n    return () => overlay.setMap(null)\n  }, [state.map])\n\n  return ReactDOM.createPortal(children, container)\n}\n\nOverlayView.displayName = 'OverlayView'\n\nexport default OverlayView\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_POLYGON_OPTIONS} from '../common/constants'\nimport {PolygonProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst Polygon = ({\n  id,\n  opts = DEFAULT_POLYGON_OPTIONS,\n  onClick,\n  onDoubleClick,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  onMouseDown,\n  onMouseOut,\n  onMouseOver,\n  onMouseUp,\n  onRightClick,\n}: PolygonProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [polygon, setPolygon] = useState<google.maps.Polygon | undefined>(\n    undefined,\n  )\n  const [polygonId] = useState(id ? id : `polygon-${uuid()}`)\n\n  const addPolygon = (polygon: google.maps.Polygon) =>\n    dispatch({type: 'add_object', object: polygon, id: polygonId})\n  const removePolygon = () => dispatch({type: 'remove_object', id: polygonId})\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const polygon = new google.maps.Polygon({\n      ...opts,\n      map: state.map,\n    })\n    setPolygon(polygon)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add the polygon to state.objects\n    addPolygon(polygon)\n\n    // Remove the polygon when the component is unmounted\n    return () => removePolygon()\n  }, [state.map])\n\n  // Register google map event listeners\n  useGoogleListener(polygon, [\n    {name: 'click', handler: onClick},\n    {name: 'dblclick', handler: onDoubleClick},\n    {name: 'drag', handler: onDrag},\n    {name: 'dragend', handler: onDragEnd},\n    {name: 'dragstart', handler: onDragStart},\n    {name: 'mousedown', handler: onMouseDown},\n    {name: 'mouseout', handler: onMouseOut},\n    {name: 'mouseover', handler: onMouseOver},\n    {name: 'mouseup', handler: onMouseUp},\n    {name: 'rightclick', handler: onRightClick},\n  ])\n\n  // Modify the google.maps.Polygon object when component props change\n  useMemoizedOptions(polygon, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nPolygon.displayName = 'Polygon'\n\nexport default Polygon\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_POLYLINE_OPTIONS} from '../common/constants'\nimport {PolylineProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst Polyline = ({\n  id,\n  opts = DEFAULT_POLYLINE_OPTIONS,\n  onClick,\n  onDoubleClick,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  onMouseDown,\n  onMouseOut,\n  onMouseOver,\n  onMouseUp,\n  onRightClick,\n}: PolylineProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [polyline, setPolyline] = useState<google.maps.Polyline | undefined>(\n    undefined,\n  )\n  const [polylineId] = useState(id ? id : `polyline-${uuid()}`)\n\n  const addPolyline = (polyline: google.maps.Polyline) =>\n    dispatch({type: 'add_object', object: polyline, id: polylineId})\n  const removePolyline = () => dispatch({type: 'remove_object', id: polylineId})\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const polyline = new google.maps.Polyline({\n      ...opts,\n      map: state.map,\n    })\n    setPolyline(polyline)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add the polyline to state.objects\n    addPolyline(polyline)\n\n    // Remove the polyline when the component is unmounted\n    return () => removePolyline()\n  }, [state.map])\n\n  // Register google map event listeners\n  useGoogleListener(polyline, [\n    {name: 'click', handler: onClick},\n    {name: 'dblclick', handler: onDoubleClick},\n    {name: 'drag', handler: onDrag},\n    {name: 'dragend', handler: onDragEnd},\n    {name: 'dragstart', handler: onDragStart},\n    {name: 'mousedown', handler: onMouseDown},\n    {name: 'mouseout', handler: onMouseOut},\n    {name: 'mouseover', handler: onMouseOver},\n    {name: 'mouseup', handler: onMouseUp},\n    {name: 'rightclick', handler: onRightClick},\n  ])\n\n  // Modify the google.maps.Polyline object when component props change\n  useMemoizedOptions(polyline, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nPolyline.displayName = 'Polyline'\n\nexport default Polyline\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {DEFAULT_RECTANGLE_OPTIONS} from '../common/constants'\nimport {RectangleProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst Rectangle = ({\n  id,\n  opts = DEFAULT_RECTANGLE_OPTIONS,\n  onBoundsChanged,\n  onClick,\n  onDoubleClick,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  onMouseDown,\n  onMouseOut,\n  onMouseOver,\n  onMouseUp,\n  onRightClick,\n}: RectangleProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [rectangle, setRectangle] = useState<google.maps.Rectangle | undefined>(\n    undefined,\n  )\n  const [rectangleId] = useState(id ? id : `rectangle-${uuid()}`)\n\n  const addRectangle = (rectangle: google.maps.Rectangle) =>\n    dispatch({type: 'add_object', object: rectangle, id: rectangleId})\n  const removeRectangle = () =>\n    dispatch({type: 'remove_object', id: rectangleId})\n\n  useEffect(() => {\n    if (state.map === undefined) return\n    const rectangle = new google.maps.Rectangle({\n      ...opts,\n      map: state.map,\n    })\n    setRectangle(rectangle)\n    setPrevOpts(JSON.stringify(opts))\n\n    // Add the rectangle to state.objects\n    addRectangle(rectangle)\n\n    // Remove the rectangle when the component is unmounted\n    return () => removeRectangle()\n  }, [state.map])\n\n  // Register google map event listeners\n  useGoogleListener(rectangle, [\n    {name: 'bounds_changed', handler: onBoundsChanged},\n    {name: 'click', handler: onClick},\n    {name: 'dblclick', handler: onDoubleClick},\n    {name: 'drag', handler: onDrag},\n    {name: 'dragend', handler: onDragEnd},\n    {name: 'dragstart', handler: onDragStart},\n    {name: 'mousedown', handler: onMouseDown},\n    {name: 'mouseout', handler: onMouseOut},\n    {name: 'mouseover', handler: onMouseOver},\n    {name: 'mouseup', handler: onMouseUp},\n    {name: 'rightclick', handler: onRightClick},\n  ])\n\n  // Modify the google.maps.Rectangle object when component props change\n  useMemoizedOptions(rectangle, opts, prevOpts, setPrevOpts)\n\n  return null\n}\n\nRectangle.displayName = 'Rectangle'\n\nexport default Rectangle\n","import React, {useContext, useEffect, useState} from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport uuid from 'uuid/v1'\nimport {useGoogleListener} from '../hooks'\nimport {DEFAULT_SEARCH_BOX_OPTIONS} from '../common/constants'\nimport {BasicSearchBoxProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\n\nconst BasicSearchBox = ({\n  id,\n  opts = DEFAULT_SEARCH_BOX_OPTIONS,\n  onPlacesChanged,\n  bindingPosition,\n  ...restProps\n}: BasicSearchBoxProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [searchBox, setSearchBox] = useState<\n    google.maps.places.SearchBox | undefined\n  >(undefined)\n  const [searchBoxId] = useState(id ? id : `search-box-${uuid()}`)\n  const [container] = useState(\n    document\n      .createRange()\n      .createContextualFragment(\n        ReactDOMServer.renderToString(\n          <input id={searchBoxId} {...restProps} />,\n        ),\n      ).firstElementChild,\n  )\n  const [lastBindingPosition, setLastBindingPosition] = useState(\n    bindingPosition,\n  )\n\n  const addSearch = (search: google.maps.places.SearchBox) =>\n    dispatch({type: 'add_object', object: search, id: searchBoxId})\n  const removeSearch = () => dispatch({type: 'remove_object', id: searchBoxId})\n\n  // Create google.maps.places.SearchBox\n  useEffect(() => {\n    if (state.map === undefined || state.places === undefined) return\n    const inputNode = (bindingPosition\n      ? container\n      : document.getElementById(searchBoxId)) as HTMLInputElement\n    const searchBox = new google.maps.places.SearchBox(inputNode, opts)\n    setSearchBox(searchBox)\n    addSearch(searchBox)\n    if (bindingPosition) {\n      if (bindingPosition !== lastBindingPosition) {\n        const last =\n          state.map.controls[google.maps.ControlPosition[lastBindingPosition!]]\n        const lastArray = last.getArray()\n        last.removeAt(lastArray.findIndex(element => element === container))\n        setLastBindingPosition(bindingPosition)\n      }\n      state.map.controls[google.maps.ControlPosition[bindingPosition]].push(\n        inputNode,\n      )\n    }\n    return () => removeSearch()\n  }, [state.places, bindingPosition])\n\n  // Register google map event listeners\n  useGoogleListener(searchBox, [\n    {name: 'places_changed', handler: onPlacesChanged},\n  ])\n\n  // Modify the google.maps.places.SearchBox object when component props change\n  useEffect(() => {\n    if (searchBox === undefined || opts.bounds === undefined) return\n    searchBox.setBounds(opts.bounds)\n  }, [opts.bounds])\n\n  return bindingPosition ? null : <input id={searchBoxId} {...restProps} />\n}\n\nBasicSearchBox.displayName = 'SearchBox'\n\nexport default BasicSearchBox\n","import React from 'react'\nimport {SearchBoxProps} from '../common/types'\nimport BasicSearchBox from './BasicSearchBox'\n\nconst SearchBox = (props: SearchBoxProps) => <BasicSearchBox {...props} />\n\nSearchBox.displayName = 'SearchBox'\n\nexport default SearchBox\n","import React from 'react'\nimport BasicSearchBox from './BasicSearchBox'\nimport {StandaloneSearchBoxProps} from '../common/types'\n\nconst StandaloneSearchBox = (props: StandaloneSearchBoxProps) => (\n  <BasicSearchBox {...props} />\n)\n\nStandaloneSearchBox.displayName = 'StandaloneSearchBox'\n\nexport default StandaloneSearchBox\n","import React, {useContext, useEffect, useState} from 'react'\nimport uuid from 'uuid/v1'\nimport {\n  DEFAULT_MAP_STYLE,\n  DEFAULT_STREET_VIEW_OPTIONS,\n} from '../common/constants'\nimport {BasicStreetViewProps} from '../common/types'\nimport {GoogleMapContext} from '../contexts/GoogleMapContext'\nimport {useGoogleListener, useMemoizedOptions} from '../hooks'\n\nconst BasicStreetView = ({\n  id,\n  className,\n  style = DEFAULT_MAP_STYLE,\n  opts = DEFAULT_STREET_VIEW_OPTIONS,\n  bindToMap,\n  onCloseClick,\n  onPanoChanged,\n  onPositionChanged,\n  onPovChanged,\n  onResize,\n  onStatusChanged,\n  onVisibleChanged,\n  onZoomChanged,\n}: BasicStreetViewProps) => {\n  const {state, dispatch} = useContext(GoogleMapContext)\n  const [prevOpts, setPrevOpts] = useState('')\n  const [streetView, setStreetView] = useState<\n    google.maps.StreetViewPanorama | undefined\n  >(undefined)\n  const [streetViewId] = useState(\n    id ? id : bindToMap ? 'street-view' : `street-view-${uuid()}`,\n  )\n\n  const addStreetView = (streetView: google.maps.StreetViewPanorama) =>\n    dispatch({type: 'add_object', object: streetView, id: streetViewId})\n  const removeStreetView = () =>\n    dispatch({type: 'remove_object', id: streetViewId})\n\n  // Handle StreetView creation and unregister\n  useEffect(() => {\n    if (state.map === undefined) return\n    const streetView = new google.maps.StreetViewPanorama(\n      document.getElementById(streetViewId) as HTMLElement,\n      opts,\n    )\n    setStreetView(streetView)\n    setPrevOpts(JSON.stringify(opts))\n    addStreetView(streetView)\n    if (bindToMap) {\n      state.map.setOptions({streetView: streetView})\n    }\n    return () => {\n      if (bindToMap) {\n        state.map && state.map.setOptions({streetView: undefined})\n      }\n      removeStreetView()\n    }\n  }, [state.map])\n\n  useGoogleListener(streetView, [\n    {name: 'closeclick', handler: onCloseClick},\n    {name: 'pano_changed', handler: onPanoChanged},\n    {name: 'position_changed', handler: onPositionChanged},\n    {name: 'pov_changed', handler: onPovChanged},\n    {name: 'resize', handler: onResize},\n    {name: 'status_changed', handler: onStatusChanged},\n    {name: 'visible_changed', handler: onVisibleChanged},\n    {name: 'zoom_changed', handler: onZoomChanged},\n  ])\n\n  // Modify the google.maps.StreetViewPanorama object when component props change\n  useMemoizedOptions(streetView, opts, prevOpts, setPrevOpts)\n\n  return <div className={className} id={streetViewId} style={style} />\n}\n\nBasicStreetView.displayName = 'BasicStreetView'\n\nexport default BasicStreetView\n","import React from 'react'\nimport {StandaloneStreetViewProps} from '../common/types'\nimport BasicStreetView from './BasicStreetView'\n\nconst StandaloneStreetView = (props: StandaloneStreetViewProps) => (\n  <BasicStreetView bindToMap={false} {...props} />\n)\n\nStandaloneStreetView.displayName = 'StandaloneStreetView'\n\nexport default StandaloneStreetView\n","import React from 'react'\nimport {StreetViewProps} from '../common/types'\nimport BasicStreetView from './BasicStreetView'\n\nconst StreetView = (props: StreetViewProps) => (\n  <BasicStreetView bindToMap {...props} />\n)\n\nStreetView.displayName = 'StreetView'\n\nexport default StreetView\n","import React from 'react'\nimport Layer from './Layer'\nimport {TrafficLayerProps} from '../common/types'\n\nconst TrafficLayer = ({opts}: TrafficLayerProps) => (\n  <Layer type=\"traffic\" opts={opts} />\n)\n\nTrafficLayer.displayName = 'TrafficLayer'\n\nexport default TrafficLayer\n","import React from 'react'\nimport Layer from './Layer'\n\nconst TransitLayer = ({}) => <Layer type=\"transit\" />\n\nTransitLayer.displayName = 'TransitLayer'\n\nexport default TransitLayer\n"],"names":["initialState","map","undefined","objects","Map","places","GoogleMapContext","React","createContext","state","dispatch","reducer","action","type","Error","Object","object","id","has","set","objectToRemove","get","setMap","delete","GoogleMapConsumer","Consumer","Layer","ref","layerId","useContext","useState","useEffect","layerNameToClass","bicycling","google","maps","BicyclingLayer","traffic","TrafficLayer","transit","TransitLayer","layer","opts","setLayer","addLayer","setOptions","displayName","const","NYC_LATLNG","lat","lng","NYC_POLYGON","NYC_RECTANGLE","east","west","north","south","DEFAULT_CIRCLE_OPTIONS","center","radius","DEFAULT_DRAWING_MANAGER_OPTIONS","DEFAULT_GROUND_OVERLAY_OPTIONS","url","bounds","DEFAULT_HEAT_MAP_OPTIONS","data","DEFAULT_INFO_WINDOW_OPTIONS","content","position","DEFAULT_KML_LAYER_OPTIONS","DEFAULT_MAP_OPTIONS","zoom","DEFAULT_MAP_STYLE","height","width","DEFAULT_MARKER_OPTIONS","DEFAULT_POLYGON_OPTIONS","paths","DEFAULT_POLYLINE_OPTIONS","path","DEFAULT_RECTANGLE_OPTIONS","DEFAULT_SEARCH_BOX_OPTIONS","DEFAULT_STREET_VIEW_OPTIONS","GOOGLE_MAP_LIBRARY_NAMES","useGoogleAPI","document","googleMapScriptUri","GOOGLE_MAP_BASE_URI","apiKey","libraryParam","languageParam","regionParam","loadjs","isDefined","ready","success","setLoaded","error","reset","console","loaded","useGoogleListener","instance","events","listeners","forEach","event","handler","push","addListener","name","listener","remove","useMemoizedOptions","prevOpts","setPrevOpts","JSON","stringify","Circle","uuid","circle","setCircle","circleId","addCircle","onCenterChanged","onClick","onDoubleClick","onDrag","onDragEnd","onDragStart","onMouseDown","onMouseOut","onMouseOver","onMouseUp","onRadiusChanged","onRightClick","CustomControl","createElement","bindingPosition","lastBindingPosition","last","controls","ControlPosition","lastArray","getArray","removeAt","findIndex","element","container","setLastBindingPosition","ReactDOM","createPortal","children","DrawingManager","shapeCountRef","useRef","current","shapeCount","drawingManager","drawing","setDrawingManager","addDrawingManager","let","i","drawingManagerId","removeShapes","onCircleComplete","onMarkerComplete","onOverlayComplete","shape","overlay","setShapeCount","onPolygonComplete","onPolylineComplete","onRectangleComplete","GroundOverlay","removeGroundOverlay","groundOverlayId","createGroundOverlay","groundOverlay","clickable","opacity","setGroundOverlay","setPrevBounds","setPrevClickable","addGroundOverlay","getOpacity","setOpacity","getUrl","is","prevBounds","prevClickable","validate","window","hasOwnProperty","visualization","withSecurityBounder","WrappedComponent","props","setVisLoaded","timer","setInterval","clearInterval","visLoaded","transformLatLng","orig","location","LatLng","weight","SafeHeatMap","heatMap","HeatmapLayer","latLng","setHeatMap","heatMapId","setData","InfoWindow","infoWindow","setInfoWindow","anchor","anchorId","visible","open","close","onCloseClick","onContentChanged","onDOMReady","onPositionChanged","onZIndexChanged","KmlLayer","kmlLayer","setKmlLayer","kmlLayerId","addKmlLayer","onDefaultViewportChanged","onStatusChanged","MapBox","initMap","libraries","useDrawing","geometry","useGeometry","usePlaces","useVisualization","filter","library","join","language","region","stringifiedOpts","getElementById","mapItemId","parse","PlacesService","onBoundsChanged","onHeadingChanged","onIdle","onMapTypeIdChanged","onMouseMove","onProjectionChanged","onTilesLoaded","onTiltChanged","onZoomChanged","LoadedComponent","LoadingComponent","style","className","Marker","marker","setMarker","markerId","addMarker","onAnimationChanged","onClickableChanged","onCursorChanged","onDraggableChanged","onFlatChanged","onIconChanged","onShapeChanged","onTitleChanged","onVisibleChanged","OverlayView","onAdd","onclick","ondblclick","onmousedown","onmouseover","onmouseout","onmouseup","ontouchend","onTouchEnd","ontouchstart","onTouchStart","disableMapHitsAndGestures","preventMapHitsAndGesturesFrom","disableMapHits","preventMapHitsFrom","getPanes","pane","appendChild","draw","getProjection","fromLatLngToDivPixel","left","x","top","y","onRemove","parentNode","removeChild","setOverlay","Polygon","polygon","setPolygon","polygonId","addPolygon","Polyline","polyline","setPolyline","polylineId","addPolyline","Rectangle","rectangle","setRectangle","rectangleId","addRectangle","BasicSearchBox","createRange","createContextualFragment","ReactDOMServer","renderToString","searchBoxId","restProps","firstElementChild","inputNode","searchBox","SearchBox","setSearchBox","onPlacesChanged","setBounds","StandaloneSearchBox","BasicStreetView","bindToMap","streetView","StreetViewPanorama","streetViewId","setStreetView","addStreetView","onPanoChanged","onPovChanged","onResize","StandaloneStreetView","StreetView","useReducer","Provider","value"],"mappings":"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"}